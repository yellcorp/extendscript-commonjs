# Common settings across all environments, all ES versions
rules:
  no-cond-assign:
    - error
    - except-parens
  no-control-regex: off
  no-dupe-args: error
  no-dupe-keys: error
  no-duplicate-case: error
  no-empty-character-class: error
  no-ex-assign: error
  no-extra-boolean-cast: error
  no-extra-parens: off
  no-empty:
    - error
    - allowEmptyCatch: true
  no-extra-semi: error
  no-func-assign: error
  no-inner-declarations:
    - error
    - functions
  no-invalid-regexp: error
  no-irregular-whitespace: off
  no-obj-calls: error
  no-prototype-builtins: error
  no-regex-spaces: off
  no-sparse-arrays: error
  no-unexpected-multiline: error
  no-unreachable: error
  no-unsafe-finally: error
  no-unsafe-negation: error
  use-isnan: error
  valid-jsdoc: off
  valid-typeof: error

  array-callback-return: error
  # complexity: ???
  consistent-return: error
  curly: error
  default-case: off
  dot-location:
    - warn
    - property
  eqeqeq:
    - error
    - always
    - null: never
  guard-for-in: error
  no-caller: error
  no-div-regex: error
  no-else-return: error
  no-empty-function: error
  no-eq-null: off
  no-eval: error
  no-extend-native: error
  no-extra-bind: error
  no-extra-label: error
  no-fallthrough: error
  no-floating-decimal: error
  no-global-assign: error
  no-implicit-coercion:
    - error
    - number: false
  no-implicit-globals: error
  no-implied-eval: error
  no-invalid-this: error
  no-iterator: error

  # review: admittedly yes it's an obscure feature but handy in the rare
  # cases it's needed
  no-labels: error

  no-lone-blocks: error
  no-loop-func: error

  # review: can be good to enforce in drawing/layout code
  no-magic-numbers: off

  no-multi-spaces: off
  no-multi-str: error
  no-new-func: error
  no-new-wrappers: error
  no-new: error
  no-octal-escape: error
  no-octal: error
  no-param-reassign: off
  no-proto: error
  no-redeclare: error
  no-return-assign: error
  no-script-url: error
  no-self-assign: error
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-unused-expressions: error
  no-unused-labels: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-void: error
  no-with: error
  wrap-iife: error
  yoda:
    - warn
    - never

  strict:
    - error
    - safe

  init-declarations: off
  no-catch-shadow: error
  no-delete-var: error
  no-label-var: error
  # no-restricted-globals:
  #   - error
  #   - ...
  no-shadow-restricted-names: error

  # review, maybe unnecessarily harsh
  no-shadow: error

  no-undef: error
  no-undef-init: error
  no-unused-vars:
    - error
    - vars: all
      args: after-used
      argsIgnorePattern: "^_"
  no-use-before-define: error
  global-require: error
  no-mixed-requires: warn
  no-new-require: error
  block-spacing: off
  brace-style:
    - warn
    - 1tbs
    - allowSingleLine: true
  comma-dangle:
    - off
    - only-multiline
  computed-property-spacing:
    - warn
    - never
  consistent-this:
    - warn
    - self
  eol-last:
    - warn
    - unix
  func-call-spacing:
    - warn
    - never

  # review: their rationale for "always" is kinda compelling, but probably
  # means bad minification. and most environments seem to be smart enough
  # about labeling the function
  func-names:
    - warn
    - never

  func-style: off
  id-blacklist:
    - warn
    - err
    - e
    - cb
  id-length: off
  id-match: off
  keyword-spacing:
    - warn
    - before: true
      after: true
  linebreak-style:
    - error
    - unix
  lines-around-comment: off
  max-depth: off
  max-len:
    - warn
    - code: 128
      ignoreUrls: true
  max-lines: off
  max-nested-callbacks:
    - warn
    - 2
  max-params: off
  max-statements-per-line:
    - warn
    - max: 1
  max-statements: off
  multiline-ternary: off
  new-cap:
    - warn
    - newIsCap: true
      capIsNew: true
      properties: true
  new-parens: warn
  newline-per-chained-call:
    - warn
    - ignoreChainWithDepth: 3
  no-array-constructor: error
  no-bitwise: off
  no-continue: off
  no-lonely-if: error

  # review: see what happens
  no-mixed-operators:
    - warn
    - groups:
        - [ "&", "|", "^", "~", "<<", ">>", ">>>", "&&", "||" ]
        - [ "in", "instanceof" ]

  no-mixed-spaces-and-tabs: error
  no-multiple-empty-lines:
    - warn
    - max: 2

  # review: too harsh?
  no-negated-condition: warn

  # review: do other options give more control?
  no-nested-ternary: off
  no-new-object: error
  no-plusplus: off
  # no-restricted-syntax:
  # - error
  # - ...
  no-tabs: error
  no-trailing-spaces: error

  # disabled for now because it doesn't play nice with my idiom of
  # calling prototype 'p' and assigning methods to it
  no-underscore-dangle:
    - off
    - allowAfterThis: true
      allowAfterSuper: true

  no-unneeded-ternary: error
  no-whitespace-before-property: warn
  one-var-declaration-per-line: off
  one-var:
    - warn
    - initialized: never
      uninitialized: always
  operator-assignment:
    - warn
    - always
  operator-linebreak:
    - warn
    - after
  padded-blocks:
    - warn
    - never
  quote-props:
    - warn
    - consistent-as-needed
  quotes:
    - warn
    - double
    - avoidEscape: true
  require-jsdoc: off
  semi:
    - error
    - always
  space-before-blocks:
    - warn
    - always
  space-before-function-paren:
    - warn
    - anonymous: always
      named: never
  space-in-parens:
    - warn
    - never
  space-infix-ops: warn
  space-unary-ops:
    - warn
    - words: true
      nonwords: false
  unicode-bom:
    - error
    - never
